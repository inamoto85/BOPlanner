import atexit
import csv
import time
import numpy as np
import torch
import pandas as pd
import pyesapi as api
import json
from ax.modelbridge.random import RandomModelBridge
from ax import Experiment
from typing import Dict, cast
from ax.core.data import Data
from ax.core.arm import Arm
from ax.core.types import TTrialEvaluation
from ax.core.generator_run import GeneratorRun
from ax.core.objective import Objective
from ax.core.optimization_config import OptimizationConfig
from ax.modelbridge.registry import Models
from bo_planner.opt_backend import OptSimulator, OptRunner
from bo_planner.metric import PlanQualityMetric
import bo_planner.opt_space as opt_space
from bo_planner.data_storage import DataStorage
import bo_planner.utils as utils


def main(n_batch, patient_id=None,
         course_id="C1", plan_id="sobol",
         model_select='FULLYBAYESIAN',
         goal_fn="./config/PQM/Rectum/PQM.csv",
         obj_fn="./config/prescriptions/Rectum/34D.csv",
         const_fn = "./config/prescriptions/Rectum/rectum_constraint.txt",
         n_init=1,
         batch_size=3,
         opt_dir=None,
         dvh_dir=None,
         **kwargs
         ):
    """Main routine for the automated planning.
    The total number of queried samples are `n_init + n_batch * batch_size`
    Args:
        n_batch: total number of trial batches
        patient_id: patient ID
        course_id: course ID
        plan_id: Plan ID
        model_select: BO model to use
        goal_fn: filename defining the clinical goals for PQM
        obj_fn: filename defining the objective space for TPS
        n_init: initial trial numbers, currently using Sobol sequences
        batch_size: size of each trial batch
    Return:
        None
    """
    config_fn = kwargs.pop("env_fn", "./config/env_config.json")
    with open(config_fn, "r") as buf:
         config = json.load(buf)
    tkwargs = {
        "dtype": torch.double,
        "device": torch.device("cuda" if torch.cuda.is_available() else "cpu")}
    goal_df = pd.read_csv(goal_fn)
    f_df, p_dict, f_dict = opt_space.parse_obj(obj_fn)
    c_str = opt_space.load_constraints(const_fn)
    struct_roi = {i.split("_")[0] for i in goal_df["Structure"]}
    # add BODY for further extractions of total dvh
    struct_roi.add("BODY")
    app = api.CustomScriptExecutable.CreateApplication("BayOpt")
    atexit.register(app.Dispose)
    # initialize simulator
    patient = app.OpenPatientById(patient_id)
    patient.BeginModifications()
    plan = patient.CoursesLot(course_id).PlanSetupsLot(plan_id)
    plan.SetCalculationModel(api.CalculationType.PhotonVolumeDose, config["DCA"])
    plan.SetCalculationModel(api.CalculationType.PhotonIMRTOptimization, config["OA"])
    plan.SetCalculationModel(api.CalculationType.PhotonVMATOptimization, config["OA"])
    plan.SetCalculationModel(api.CalculationType.PhotonLeafMotions, config["LMC"])
    plan.SetCalculationOption(config["DCA"], "UseGPU", "Yes")
    plan.SetCalculationOption(config["OA"], "UseGPU", "Yes")
    opt_simulator = OptSimulator(plan, struct_roi, fixed_objectives=f_dict)
    opt_runner = OptRunner(opt_simulator)
    opt_prefix = "./opt_res/{}".format(patient_id) + opt_dir
    dvh_prefix = "./opt_res/{}".format(patient_id) + dvh_dir
    save_data = DataStorage(opt_prefix, dvh_prefix, p_dict)  # data storage
    pars_random = []

    # initialize search space
    search_space = opt_space.form_space(p_dict, c_strs=c_str)
    plan_quality = PlanQualityMetric("PQM", goal_df, noise_sd=0)
    optimization_config = OptimizationConfig(objective=Objective(metric=plan_quality))
    print(f"doing {n_init + n_batch * batch_size} evaluations")
    experiment = Experiment(name="saasbo_planning",
                            search_space=search_space,
                            optimization_config=optimization_config,
                            runner=opt_runner)
    sobol = Models.SOBOL(search_space=experiment.search_space)
    experiment = opt_space.init_data(patient_id, experiment, n_init, mode="sobol", file='', generator=sobol)
    for trial_name, trial in experiment.trials.items():  # extract data from initial experiment
        pars_random.append(list(trial.arms[0].parameters.values()))
        save_data.save_dvh(trial.arms)   # Store the DVHs generated by SOBOL during initialization
    data = experiment.fetch_data()
    save_data.save_init_data(data, pars_random)   # save init data

    for i in range(n_batch):
        if model_select == 'FULLYBAYESIAN':
            model = Models.FULLYBAYESIAN(
               experiment=experiment,
               data=data,
               num_samples=256,
               warmup_steps=512,
               gp_kernel="matern",
               torch_device=tkwargs["device"],
               torch_dtype=tkwargs["dtype"],
               verbose=False,
               disable_progbar=True)
        elif model_select == 'GPEI':
            model = Models.GPEI(
                experiment=experiment,
                data=data,
            )
        elif model_select == 'SOBOL':
            model = Models.SOBOL(
                experiment=experiment,
                data=data,
            )
        generator_run = model.gen(batch_size)
        trial = experiment.new_batch_trial(generator_run=generator_run)
        trial.run()
        trial.complete()
        data = Data.from_multiple_data([data, trial.fetch_data()])
        new_value = trial.fetch_data().df["mean"].max()
        if model_select == 'FULLYBAYESIAN':
            save_data.save_lenscal_saas(model)
        elif model_select == 'GPEI':
            save_data.save_lenscale_gpei(model)
        save_data.save_opt_data(data, trial, batch_size, n_init, i)
        save_data.save_dvh(trial.arms)
        print(f"Iteration: {i}, Best in iteration {new_value:.3f}, Best so far: {data.df['mean'].max():.3f}")
    save_data.close_lenscale_file()

    best_params, arm_name = utils.extract_best_params(data, experiment)
    # last step: dose calculation and re-optimization with the best params
    data, trial = utils.calculate_plan(experiment, arm_name, best_params, data)
    save_data.save_cal_data(data, best_params)
    save_data.save_dvh(trial.arms, 'reopt-cal1')

    # reopt with calculated dose
    data, trial = utils.reopt_calculated_plan(experiment, best_params, data)
    save_data.save_cal_data(data, best_params)
    save_data.close_pars_file()
    save_data.save_dvh(trial.arms, 'reopt-cal2')
    app.SaveModifications()
    app.ClosePatient()
    app.Dispose()
    print("optimization completed")


if __name__ == "__main__":
    with open("./config/pat_names.txt", "r") as buf:
         pat_list = list(buf.readline().strip().split(" "))
    for pa in pat_list:
        main(n_batch=2, patient_id=pa, plan_id="test", model_select='SOBOL', opt_dir="/util_random/", dvh_dir="/dvh_random/")
        print(pa + ' sobol is ok !')
        main(n_batch=2, patient_id=pa, plan_id="test", model_select='GPEI', opt_dir="/util_gpei/", dvh_dir="/dvh_gpei/")
        print(pa + ' gpei is ok !')
        main(n_batch=2, patient_id=pa, plan_id="test", model_select='FULLYBAYESIAN', opt_dir="/util_saas/", dvh_dir="/dvh_saas/")
        print(pa + " saasbo is ok !")




